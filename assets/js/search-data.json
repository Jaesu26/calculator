{
  
    
        "post0": {
            "title": "계산기2",
            "content": "- 기존 계산기에 부족한 기능을 보완하여 버전2 계산기를 만들려고 함 . - 버전1 계산기에서 업그레이드된 함수 기능에 대한 설명을 추가할 거임 . - 후에 기능을 더 추가할 수 도 있음 . &#44228;&#49328;&#44592;2 &#54632;&#49688; &#51204;&#52404; &#53076;&#46300;(&#50756;&#49457;) . - 기존 계산기에서 추가된 함수에 대한 설명 . ## Backspace def backspace_button_click(): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) else: current_entry = entry.get()[:-1] entry.delete(0, &#39;end&#39;) entry.insert(0, current_entry) reset = 0 ## Transcendental number(pi and e) def transcendental_number_button_click(tran_num): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, tran_num) current_entry = entry.get() new_entry = current_entry + tran_num if len(current_entry) &lt; 1: entry.insert(0, tran_num) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 제곱 def square_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;^2&#39; if reset == 1 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) if reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) else: last = current_entry[-1] if last != &#39;+&#39; and last != &#39;-&#39; and last != &#39;×&#39; and last != &#39;÷&#39; and last != &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 제곱근(√) def square_root_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;√(&#39; if reset == 1 or reset == 2 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;√(&#39;) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 자연로그 def log_e_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;ln(&#39; if reset == 1 or reset == 2 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;ln(&#39;) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . backspace_button_click . ## Backspace def backspace_button_click(): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) else: current_entry = entry.get()[:-1] entry.delete(0, &#39;end&#39;) entry.insert(0, current_entry) reset = 0 . - current_entry에서 마지막 글자를 지운다 . transcendental_number_button_click . ## Transcendental number def transcendental_number_button_click(tran_num): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, tran_num) current_entry = entry.get() new_entry = current_entry + tran_num if len(current_entry) &lt; 1: entry.insert(0, tran_num) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39; or last == &#39;)&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - π나 e를 입력할 수 있다 . square_button_click . ## 제곱 def square_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;^2&#39; if reset == 1 or reset == 2 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) else: last = current_entry[-1] if last != &#39;+&#39; and last != &#39;-&#39; and last != &#39;×&#39; and last != &#39;÷&#39; and last != &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 제곱 연산을 할 수 있다 . square_root_button_click . ## 제곱근(√) def square_root_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;√(&#39; if reset == 1 or reset == 2 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;√(&#39;) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 제곱근 연산을 할 수 있다 . log_e_button_click . ## 자연로그 def log_e_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;ln(&#39; if reset == 1 or reset == 2 or current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;ln(&#39;) else: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 자연로그 연산을 할 수 있다 .",
            "url": "https://jaesu26.github.io/calculator/python/2021/08/13/%EA%B3%84%EC%82%B0%EA%B8%B02.html",
            "relUrl": "/python/2021/08/13/%EA%B3%84%EC%82%B0%EA%B8%B02.html",
            "date": " • Aug 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "계산기",
            "content": "&#51204;&#52404; &#53076;&#46300;(&#50756;&#49457;) . ## 파이썬의 tkinter를 통해 계산기를 만들어보자 ## tkinter import 하기 import tkinter as tk import tkinter.font ## 윈도우창 생성 window = tk.Tk() ## 윈도우 제목 설정 window.title(&#39;계산기&#39;) ## 윈도우 창 크기 설정 window.geometry(&#39;350x500+800+200&#39;) ## 창 크기 조절 불가능 window.resizable(False, False) ## 상단 프레임 설정 upper_frame = tk.Frame(window) upper_frame.pack(pady = 40) ## 하단 프레임 설정 down_frame = tk.Frame(window) down_frame.pack(padx = 10, pady = 10) ## 계산기 숫자 입력창 entry = tk.Entry(upper_frame, justify = &#39;right&#39;, width = 30, borderwidth = 5) entry.pack() ## 함수 설정 ## 초기화 reset = 0 ## 숫자 클릭 def number_button_click(num): global reset current_entry = entry.get() new_entry = current_entry + str(num) if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, str(num)) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 등호 클릭 def equal_button_click(): global reset current_entry = entry.get() if current_entry.find(&#39;÷&#39;) != -1: current_entry = current_entry.replace(&#39;÷&#39;, &#39;/&#39;) if current_entry.find(&#39;×&#39;) != -1: current_entry = current_entry.replace(&#39;×&#39;, &#39;*&#39;) try: rtn = eval(current_entry) entry.delete(0, &#39;end&#39;) entry.insert(0, rtn) reset = 1 except ZeroDivisionError: error_message = &#39;0으로 나눌 수 없습니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 except (SyntaxError, TypeError): error_message = &#39;잘못된 수식입니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 ## 사칙연산 클릭 def operation_button_click(op): global reset if reset == 2: entry.delete(0, &#39;end&#39;) test_entry = current_entry = entry.get() test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) test_list = test_entry.split(&#39;+&#39;) if len(current_entry) &gt; 0: last = current_entry[-1] test_idx = test_list[-1] condition = last != &#39;+&#39; and last != &#39;-&#39; and last != &#39;×&#39; and last != &#39;÷&#39; if condition and last != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) if test_idx == &#39;.&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, current_entry) if condition and test_idx != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## entry clear def clear_button_click(): global reset reset = 0 entry.delete(0, &#39;end&#39;) ## parentheses operation def paren_button_click(paren): global reset current_entry = entry.get() new_entry = current_entry + paren if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, paren) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## decimal point def point_button_click(): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;.&#39;) test_entry = current_entry = entry.get() new_entry = current_entry + &#39;.&#39; if current_entry.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) else: test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) if len(test_entry) &lt; 1: entry.insert(0, &#39;.&#39;) else: test_list = test_entry.split(&#39;+&#39;) test_idx = test_list[-1] if test_idx.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## plus, minus sign def plus_minus_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;-&#39; if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif len(current_entry) &gt; 0: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39; or last == &#39;)&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 버튼 폰트 설정 font = tk.font.Font(size = 17) ## 1번재 줄 버튼 b_letf_paren = tk.Button(down_frame, text = &#39;(&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: paren_button_click(&#39;(&#39;)) b_letf_paren.grid(row = 0, column = 0, padx = 5, pady = 5) b_right_paren = tk.Button(down_frame, text = &#39;)&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2 , height = 1, bg = &#39;red&#39;, command = lambda: paren_button_click(&#39;)&#39;)) b_right_paren.grid(row = 0, column = 1, padx = 5, pady = 5) b_C = tk.Button(down_frame, text = &#39;C&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = clear_button_click) b_C.grid(row = 0, column = 2, padx = 5, pady = 5) b_div = tk.Button(down_frame, text = &#39;÷&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;÷&#39;)) b_div.grid(row = 0, column = 3, padx = 5, pady = 5) ## 2번재 줄 버튼 b_7 = tk.Button(down_frame, text = &#39;7&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(7)) b_7.grid(row = 1, column = 0, padx = 5, pady = 5) b_8 = tk.Button(down_frame, text = &#39;8&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(8)) b_8.grid(row = 1, column = 1, padx = 5, pady = 5) b_9 = tk.Button(down_frame, text = &#39;9&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(9)) b_9.grid(row = 1, column = 2, padx = 5, pady = 5) b_mul = tk.Button(down_frame, text = &#39;×&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;×&#39;)) b_mul.grid(row = 1, column = 3, padx = 5, pady = 5) ## 3번재 줄 버튼 b_4 = tk.Button(down_frame, text = &#39;4&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(4)) b_4.grid(row = 2, column = 0, padx = 5, pady = 5) b_5 = tk.Button(down_frame, text = &#39;5&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(5)) b_5.grid(row = 2, column = 1, padx = 5, pady = 5) b_6 = tk.Button(down_frame, text = &#39;6&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(6)) b_6.grid(row = 2, column = 2, padx = 5, pady = 5) b_sub = tk.Button(down_frame, text = &#39;-&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;-&#39;)) b_sub.grid(row = 2, column = 3, padx = 5, pady = 5) ## 4번재 줄 버튼 b_1 = tk.Button(down_frame, text = &#39;1&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(1)) b_1.grid(row = 3, column = 0, padx = 5, pady = 5) b_2 = tk.Button(down_frame, text = &#39;2&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(2)) b_2.grid(row = 3, column = 1, padx = 5, pady = 5) b_3 = tk.Button(down_frame, text = &#39;3&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(3)) b_3.grid(row = 3, column = 2, padx = 5, pady = 5) b_add = tk.Button(down_frame, text = &#39;+&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1 , bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;+&#39;)) b_add.grid(row = 3, column = 3, padx = 5, pady = 5) ## 5번재 줄 버튼 b_sign = tk.Button(down_frame, text = &#39;+/-&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = plus_minus_button_click) b_sign.grid(row = 4, column = 0, padx = 0, pady = 2) b_0 = tk.Button(down_frame, text = &#39;0&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(0)) b_0.grid(row = 4, column = 1, padx = 5, pady = 2) b_point = tk.Button(down_frame, text = &#39;.&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = point_button_click) b_point.grid(row = 4, column = 2, padx = 5, pady = 2) b_equal = tk.Button(down_frame, text = &#39;=&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = equal_button_click, activebackground = &#39;blue&#39;) b_equal.grid(row = 4, column = 3, padx = 5, pady = 2) ## 종료할 때까지 윈도우창 띄우기 window.mainloop() . - 일단 목표로 했던 기능은 완성 + 새로운 기능 추가할 예정 . - 코드에 대한 설명이 있으면 좋을 것 같아서 설명을 추가하려 함 . &#53076;&#46300; &#49444;&#47749; . - 코드에 대한 설명 추가 . - 구현한 기능은 0~9 숫자, 사칙연산 기호, 입력창 초기화, 숫자의 부호(+/-), 소수점, 소괄호, 등호 . - 기능은 추가 예정 . &#44228;&#49328;&#44592; &#44592;&#48376;&#53952; . - 계산기 기본틀 코드 . ## 윈도우창 생성 window = tk.Tk() ## 윈도우 제목 설정 window.title(&#39;계산기&#39;) ## 윈도우 창 크기 설정 window.geometry(&#39;350x500+800+200&#39;) ## 창 크기 조절 불가능 window.resizable(False, False) ## 단 프레임 설정 upper_frame = tk.Frame(window) upper_frame.pack(pady = 40) ## 하단 프레임 설정 down_frame = tk.Frame(window) down_frame.pack(padx = 10, pady = 10) ## 계산기 숫자 입력창 entry = tk.Entry(upper_frame, justify = &#39;right&#39;, width = 30, borderwidth = 5) entry.pack() ## 종료할 때까지 윈도우창 띄우기 window.mainloop() . - 1번째줄 코드는 윈도우창을 생성함 . - 2번째줄 코드는 윈도우창의 제목을 설정 . - 3번째줄 코드는 윈도우창의 크기와 컴퓨터 화면에 나타나는 위치를 설정 . - 4번째줄 코드는 윈도우창의 크기를 조절하지 못하도록 설정 . - 5번째줄 코드는 상단 프레임을 설정함(크기 자동 조절) &gt; 계산기의 입력창과 하단의 버튼창을 구분하기 위함임 . - 6번째줄 코드는 상단 프레임의 위치를 맨위로 지정함 . - 7, 8번째줄 코드는 하단 프레임 설정하고 하단 프레임의 위치를 상단프레임의 아래로 지정함(크기 자동 조절) . - 8, 9번째줄 코드는 계산기에서 사용자가 입력한 숫자를 입력받는 부분임 . - 마지막 코드는 종료할 때까지 윈도우창을 띄운다 . &#44228;&#49328;&#44592; &#48260;&#53948; . - 계산기 버튼 코드 . ## 버튼 폰트 설정 font = tk.font.Font(size = 17) ## 1번재 줄 버튼 b_letf_paren = tk.Button(down_frame, text = &#39;(&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;) b_letf_paren.grid(row = 0, column = 0, padx = 5, pady = 5) b_right_paren = tk.Button(down_frame, text = &#39;)&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2 , height = 1, bg = &#39;red&#39;) b_right_paren.grid(row = 0, column = 1, padx = 5, pady = 5) b_C = tk.Button(down_frame, text = &#39;C&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = clear_button_click) b_C.grid(row = 0, column = 2, padx = 5, pady = 5) b_div = tk.Button(down_frame, text = &#39;÷&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;÷&#39;)) b_div.grid(row = 0, column = 3, padx = 5, pady = 5) ## 2번재 줄 버튼 b_7 = tk.Button(down_frame, text = &#39;7&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(7)) b_7.grid(row = 1, column = 0, padx = 5, pady = 5) b_8 = tk.Button(down_frame, text = &#39;8&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(8)) b_8.grid(row = 1, column = 1, padx = 5, pady = 5) b_9 = tk.Button(down_frame, text = &#39;9&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(9)) b_9.grid(row = 1, column = 2, padx = 5, pady = 5) b_mul = tk.Button(down_frame, text = &#39;×&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;×&#39;)) b_mul.grid(row = 1, column = 3, padx = 5, pady = 5) ## 3번재 줄 버튼 b_4 = tk.Button(down_frame, text = &#39;4&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(4)) b_4.grid(row = 2, column = 0, padx = 5, pady = 5) b_5 = tk.Button(down_frame, text = &#39;5&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(5)) b_5.grid(row = 2, column = 1, padx = 5, pady = 5) b_6 = tk.Button(down_frame, text = &#39;6&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(6)) b_6.grid(row = 2, column = 2, padx = 5, pady = 5) b_sub = tk.Button(down_frame, text = &#39;-&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;-&#39;)) b_sub.grid(row = 2, column = 3, padx = 5, pady = 5) ## 4번재 줄 버튼 b_1 = tk.Button(down_frame, text = &#39;1&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(1)) b_1.grid(row = 3, column = 0, padx = 5, pady = 5) b_2 = tk.Button(down_frame, text = &#39;2&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(2)) b_2.grid(row = 3, column = 1, padx = 5, pady = 5) b_3 = tk.Button(down_frame, text = &#39;3&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(3)) b_3.grid(row = 3, column = 2, padx = 5, pady = 5) b_add = tk.Button(down_frame, text = &#39;+&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1 , bg = &#39;red&#39;, command = lambda: operation_button_click(&#39;+&#39;)) b_add.grid(row = 3, column = 3, padx = 5, pady = 5) ## 5번재 줄 버튼 b_sign = tk.Button(down_frame, text = &#39;+/-&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1) b_sign.grid(row = 4, column = 0, padx = 0, pady = 2) b_0 = tk.Button(down_frame, text = &#39;0&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, command = lambda: number_button_click(0)) b_0.grid(row = 4, column = 1, padx = 5, pady = 2) b_point = tk.Button(down_frame, text = &#39;.&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1) b_point.grid(row = 4, column = 2, padx = 5, pady = 2) b_equal = tk.Button(down_frame, text = &#39;=&#39;, bd = 2.5, padx = 15, pady = 10, font = font, width = 2, height = 1, bg = &#39;red&#39;, command = equal_button_click) b_equal.grid(row = 4, column = 3, padx = 5, pady = 2) . - 1번째줄 코드는 버튼에 들어갈 기호의 폰트를 설정함 . - 밑에 코드들은 $4 times 5$ 사이즈로 1~5번째줄에 배치될 버튼에 대한 것임 . - 버튼은 하단 프레임안에 배치되며 lambda부분은 버튼을 클릭했을때 발생하는 함수임 . &#44228;&#49328;&#44592; &#54632;&#49688; . - 계산기 함수 전체 코드 . ## 숫자 클릭 def number_button_click(num): global reset current_entry = entry.get() new_entry = current_entry + str(num) if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, str(num)) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## 등호 클릭 def equal_button_click(): global reset current_entry = entry.get() if current_entry.find(&#39;÷&#39;) != -1: current_entry = current_entry.replace(&#39;÷&#39;, &#39;/&#39;) if current_entry.find(&#39;×&#39;) != -1: current_entry = current_entry.replace(&#39;×&#39;, &#39;*&#39;) try: rtn = eval(current_entry) entry.delete(0, &#39;end&#39;) entry.insert(0, rtn) reset = 1 except ZeroDivisionError: error_message = &#39;0으로 나눌 수 없습니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 except SyntaxError: error_message = &#39;잘못된 수식입니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 ## 사칙연산 클릭 def operation_button_click(op): global reset if reset == 2: entry.delete(0, &#39;end&#39;) test_entry = current_entry = entry.get() test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) test_list = test_entry.split(&#39;+&#39;) if len(current_entry) &gt; 0: last = current_entry[-1] test_idx = test_list[-1] condition = last != &#39;+&#39; and last != &#39;-&#39; and last != &#39;×&#39; and last != &#39;÷&#39; if condition and last != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) if test_idx == &#39;.&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, current_entry) if condition and test_idx != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## entry clear def clear_button_click(): global reset reset = 0 entry.delete(0, &#39;end&#39;) ## parentheses operation def paren_button_click(paren): global reset current_entry = entry.get() new_entry = current_entry + paren if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, paren) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## decimal point def point_button_click(point): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, point) test_entry = current_entry = entry.get() new_entry = current_entry + point if current_entry.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) else: test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) if len(test_entry) &lt; 1: entry.insert(0, point) else: test_list = test_entry.split(&#39;+&#39;) test_idx = test_list[-1] if test_idx.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 ## plus, minus sign def plus_minus_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;-&#39; if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif len(current_entry) &gt; 0: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39; or last == &#39;)&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . reset . ## 함수 설정 ## 초기화 reset = 0 . - reset은 계산기를 초기화하는 역할임 . - reset이 1 or 2일 경우에는 초기화가 필요 reset이 0일 경우 초기화 불필요 . - 등호를 클릭하여 수식이 계산되어 &#39;a&#39;라는 결과가 나왔다고 하자 . - 여기서 예시로 &#39;3&#39;을 입력했다고 하면 &#39;a3&#39;이 결과창에 출력됨 &gt; 이는 잘못됨 &#39;a3&#39;이 아니라 &#39;3&#39;이 출력되야함 . - reset은 위와 같은 상황을 막아주는 역할임 reset = 1일 경우 입력된 내용을 초기화하고 새로 시작함 . number_button_click . ## 숫자 클릭 def number_button_click(num): global reset current_entry = entry.get() new_entry = current_entry + str(num) if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, str(num)) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - reset = 1 or 2일 경우 입력된 내용을 초기화함 . - 그 밖에 경우 계산기에서 숫자를 클릭하면 결과창에 숫자가 입력됨 . - 일단 결과창에 입력된 내용을 문자열로 받아와 current_entry에 저장함 . - 그리고 클릭한 숫자를 current_entry 오른쪽에 붙인 문자열을 new_entry에 저장 . - 결과창에 있는 문자열을 모두 삭제한 후 new_entry를 결과창에 출력함 . - 그리고 등호를 입력한 후에 숫자를 입력하여 reset = 1일 수 도 있음 . - 이제는 reset = 1이면 안됨 &gt; 등호를 클릭해 결과가 20이 나온 상황에서 5를 입력하면 결과창이 5로 출력됨 . - &gt; 여기서 4를 입력하면 54가 되야하지만 reset = 1이므로 4가 됨 &gt; 그러므로 reset = 0으로 바꾼다 . clear_button_click . ## entry clear def clear_button_click(): global reset reset = 0 entry.delete(0, &#39;end&#39;) . - 결과창(entry)에 입력된 내용을 전부 없애어 초기화함 . - 초기화 됐으므로 reset = 0 . equal_button_click . ## 등호 클릭 def equal_button_click(): global reset current_entry = entry.get() if current_entry.find(&#39;÷&#39;) != -1: current_entry = current_entry.replace(&#39;÷&#39;, &#39;/&#39;) if current_entry.find(&#39;×&#39;) != -1: current_entry = current_entry.replace(&#39;×&#39;, &#39;*&#39;) try: rtn = eval(current_entry) entry.delete(0, &#39;end&#39;) entry.insert(0, rtn) reset = 1 except ZeroDivisionError: error_message = &#39;0으로 나눌 수 없습니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 except SyntaxError: error_message = &#39;잘못된 수식입니다&#39; entry.delete(0, &#39;end&#39;) entry.insert(0, error_message) reset = 2 . - 등호를 입력했으므로 reset = 1로 바꿈 &gt; reset참고 . - 에러메시지가 출력되면 reset = 2로 바꿈 . - 만약 5+4를 계산해서 9가 나왔다고 하자. 여기서 숫자를 클릭하면 9가 초기화되지만 사칙연산을 클릭하면 9가 초기화 되면 안됨 &gt; 이를 구별하기 위해 reset을 1과 2로 나눔 . - eval 함수를 통해 현재 결과창에 입력된 문자열을 계산한 후 결과값을 출력함 . - 계산기에서 나누기와 곱하기 버튼 기호로 &#39;÷&#39;, &#39;×&#39;를 사용함 . - eval 함수는 사용하면 예컨데 10÷5×2와 같이 되는데 &#39;÷&#39;, &#39;×&#39;대신 &#39;/&#39;, &#39;*&#39;를 사용해야 연산이 됨. 그렇기에 replace 함수를 사용하여 기호를 바꿔줌 . - 0으로 나누거나 올바른 수식이 아닌 경우 에러 메세지를 결과창에 나타내도록 함 . operation_button_click . ## 사칙연산 클릭 def operation_button_click(op): global reset if reset == 2: entry.delete(0, &#39;end&#39;) test_entry = current_entry = entry.get() test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) test_list = test_entry.split(&#39;+&#39;) if len(current_entry) &gt; 0: last = current_entry[-1] test_idx = test_list[-1] condition = last != &#39;+&#39; and last != &#39;-&#39; and last != &#39;×&#39; and last != &#39;÷&#39; if condition and last != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) if test_idx == &#39;.&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, current_entry) if condition and test_idx != &#39;.&#39;: new_entry = current_entry + op entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 사칙연산 기호를 입력함 . - 만약 입력창에 아무것도 입력되지 않았거나 이미 사칙연산 기호를 입력한 상태라면 아무일도 벌어지지 않음 . - 이를 위해 condition 변수를 만듦 &gt; 만약 last가 사칙연산이라면 condition = False 이다 . - current_entry가 빈 문자열(길이가 0)일 때 last가 정의되지 않는 것을 고려하여 current_entry의 길이가 1 이상일 때만 last를 정의함 . - 소수점연산을 위해 코드를 추가함 . - 1. + .1은 가능하지만 . + . 과 같은 꼴은 불가능 . - 이를 고려하기 위해 사칙연산기호를 &#39;+&#39;로 통일한 후 이를 기준으로 split함 . - 우선 last == &#39;.&#39;인 경우 아무일도 일어나지 않음 &gt; 2.1 + 5. &#39;+&#39; &gt; &#39;+&#39; 불가능 &gt; 소수점으로 끝나므로 &gt; 하지만 가능한 연산이므로 이를 해결해줘야 함 . - 이를 검증하려고 test 관련 변수를 만듦 . - test_idx == &#39;.&#39;인 경우 소수점만 있는 상태이므로 아무일도 일어나지 않음 . - test_idx != &#39;.&#39; 이고 last가 사칙연산기호도 아니라면 사칙연산을 결과창에 추가함 . - 나중에 사칙연산이 입력된 상태에서 다른 사칙연산을 클릭하면 입력되지 않는 대신에 기존에 입력된 사칙연산을 지우고 새로 클릭한 사칙연산을 입력하도록 할 예정 . paren_button_click . ## parentheses operation def paren_button_click(paren): global reset current_entry = entry.get() new_entry = current_entry + paren if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, paren) else: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 괄호를 입력함 . point_button_click . ## decimal point def point_button_click(point): global reset if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, point) test_entry = current_entry = entry.get() new_entry = current_entry + point if current_entry.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) else: test_entry = test_entry.replace(&#39;÷&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;×&#39;, &#39;+&#39;) test_entry = test_entry.replace(&#39;-&#39;, &#39;+&#39;) if len(test_entry) &lt; 1: entry.insert(0, point) else: test_list = test_entry.split(&#39;+&#39;) test_idx = test_list[-1] if test_idx.find(&#39;.&#39;) == -1: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - 소수점을 입력함 . - 소수점은 하나의 숫자에 대해 여러개 사용이 불가능 &gt; 5.2.4 + 44.2.1.(X) . - 이를 고려하고자 test 관련 변수를 만듦 . - 구분을 위해 사칙연산을 모두 &#39;+&#39;로 바꾸고 이에 대해 split함 . - 만약 test_idx에 소수점이 존재한다면 하나의 숫자에 대해 이미 하나의 소수점이 충족된 상태이므로 아무일도 일어나지 않음 . plus_minus_button_click . ## plus, minus sign def plus_minus_button_click(): global reset current_entry = entry.get() new_entry = current_entry + &#39;-&#39; if reset == 1 or reset == 2: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif current_entry == &#39;&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, &#39;-&#39;) elif len(current_entry) &gt; 0: last = current_entry[-1] if last == &#39;+&#39; or last == &#39;-&#39; or last == &#39;×&#39; or last == &#39;÷&#39; or last == &#39;(&#39; or last == &#39;)&#39;: entry.delete(0, &#39;end&#39;) entry.insert(0, new_entry) reset = 0 . - -7을 입력하고 싶은데 기존의 사칙연산 &#39;-&#39; 로는 입력이 안되어 0-7을 통해 -7을 만들어야 해서 불편했음 . - 숫자앞에 마이너스(&#39;-&#39;) 부호를 입력해줌 . - 이미 소수점이나 숫자가 입력된 상태에서는 사용이 불가능하고 수를 입력하기 전에 마이너스 부호를 사용해야 함 . - ex) 7-5+4 &gt; 이 상황에서는 숫자 4가 입력되어 있으므로 사용 불가능 . - ex) 7-5+ &gt; 이 상황에서는 숫자가 입력되어 있지 않았으므로 사용 가능 .",
            "url": "https://jaesu26.github.io/calculator/python/2021/08/02/%EA%B3%84%EC%82%B0%EA%B8%B0.html",
            "relUrl": "/python/2021/08/02/%EA%B3%84%EC%82%B0%EA%B8%B0.html",
            "date": " • Aug 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "eval 함수",
            "content": "eval &#54632;&#49688; &#49324;&#50857;&#48277; . - eval() 함수는 인자에 문자열을 input하면 그대로 실행하여 출력 . rtn1 = &#39;10 + 10&#39; rtn1 . &#39;10 + 10&#39; . rtn2 = eval(&#39;10 + 10&#39;) rtn2 . 20 . a = [1, 2, 3, 4, 6] aa = len(a) print(eval(&#39;aa&#39;)) . 5 .",
            "url": "https://jaesu26.github.io/calculator/python/2021/07/30/eval%ED%95%A8%EC%88%98.html",
            "relUrl": "/python/2021/07/30/eval%ED%95%A8%EC%88%98.html",
            "date": " • Jul 30, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "파이썬 tkinter",
            "content": "- 파이썬 tkinter 참고: https://076923.github.io/posts/Python-tkinter-1/ . - 위의 사이트를 참고하면서 계산기를 구현하자 . tkinter . - GUI에 대한 표준 Python 인터페이스이며 Window 창을 생성 . - import tkinter as tk . GUI가 뭐지?? | . - 그래픽 사용자 인터페이스(graphical user interface, GUI)는 사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘 따위의 그래픽으로 나타낸 것 . - GUI 참고: GUI 설명 . tkinter &#49324;&#50857; . - 윈도우이름 = tk.Tk()를 이용하여 가장 상위 레벨의 윈도우 창을 생성 . - 윈도우이름.mainloop()를 사용하여 윈도우이름의 윈도우 창을 윈도우가 종료될 때 까지 실행 . - 생성 구문과 반복 구문 사이에 위젯을 생성하고 적용 . - tk.Tk()를 적용할 경우 가장 기본적인 윈도우 창이 생성 . window &#52285; &#49444;&#51221; . - 윈도우이름.title(&quot;제목&quot;)을 이용하여 윈도우 창의 제목을 설정 . - 윈도우이름.geometry(&quot;너비x높이+x좌표+y좌표&quot;)를 이용하여 윈도우 창의 너비와 높이, 초기 화면 위치의 x좌표와 y좌표를 설정 . - (0,0)은 컴퓨터의 좌상단 . - 윈도우이름.resizeable(상하, 좌우)을 이용하여 윈도우 창의 창 크기 조절 가능 여부를 설정 --&gt; True로 설정할 경우 윈도우 창의 크기를 조절 가능(True = 1, False = 0) . Widget &#48176;&#52824; . - 위젯이름 = tkinter.Label(윈도우창, text=&quot;내용&quot;)을 사용하여 윈도우 창에 Label 위젯을 설정 --&gt; 기본 속성: 가장 최상단에 라벨이 배치 . - 위젯이름.pack()을 사용하여 위젯을 배치 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) label = tkinter.Label(window, text = &quot;안녕하세요.&quot;) label.pack() window.mainloop() . - 기본 윈도우 창 생성 -&gt; window . - window의 제목, 크기, 창 크기 조절 . - 라벨도 추가했음 --&gt; &quot;안녕하세요&quot;라는 문자열을 window 상단 중앙부분(기본값)에 위치시킴 . Label(&#46972;&#48296;) . - Label을 이용하여 삽입한 이미지나 도표, 그림 등에 사용되는 주석문을 생성 . Label &#49324;&#50857; . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) label = tkinter.Label(window, text = &quot;파이썬&quot;, width = 10, height = 5, fg = &quot;red&quot;, relief = &quot;solid&quot;) label.pack() window.mainloop() . - tkinter.Label(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 라벨의 속성을 설정 . - window에 라벨 추가 --&gt; &quot;파이썬&quot; 문자열을 넣고 가로는 10, 세로는5, 문자열 색은 &quot;red&quot;, 라벨의 테두리 모양은 &quot;solid&quot; . Button(&#48260;&#53948;) . - Button을 이용하여 메소드 또는 함수 등을 실행시키기 위한 단추를 생성 . Button &#49324;&#50857; . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) count=0 def countUP(): global count count += 1 label.config(text = str(count)) label = tkinter.Label(window, text = &quot;0&quot;) label.pack() button = tkinter.Button(window, overrelief = &quot;solid&quot;, width = 15, command = countUP, repeatdelay = 1000, repeatinterval = 100) button.pack() window.mainloop() . - tkinter.Button(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 버튼의 속성을 설정 . - 파라미터 중 command를 이용하여 사용자 정의 함수 : countUP을 실행 . - label.config()를 통해 label의 text라는 속성을 변화시킴 . Entry(&#44592;&#51077;&#52285;) . - Entry을 이용하여 텍스트를 입력받거나 출력하기 위한 기입창을 생성 . Entry &#49324;&#50857; . import tkinter from math import * window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) def calc(event): label.config(text = &quot;결과=&quot; + str(eval(entry.get()))) entry = tkinter.Entry(window) entry.bind(&quot;&lt;Return&gt;&quot;, calc) entry.pack() label = tkinter.Label(window) label.pack() window.mainloop() . - tkinter.Entry(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 기입창의 속성을 설정 . - Entry.bind()를 이용하여 key나 mouse 등의 event를 처리하여 메소드나 함수를 실행 . - 기입창에 간단한 수학함수 등을 작성 후 Enter 키를 입력시 라벨에 결과가 표시 . - ex) 2 + 2 입력시 결과 = 4가 반환 . &#50948;&#51247; &#48176;&#52824;(pack) . - pack(=상대 위치 배치)을 이용하여 위젯들을 배치 . - 위젯이름.pack(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 위젯의 배치 속성을 설정 . - 배치되는 우선 순위는 가장 처음 선언한 pack부터 배치 . - pack의 파라미터로 인하여 위젯의 크기가 변경될 수 있음 . - pack()은 grid()와 같이 사용될 수 없으며 place()와는 같이 사용 가능 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(False, False) b1 = tkinter.Button(window, text = &quot;top&quot;) b1_1 = tkinter.Button(window, text = &quot;top-1&quot;) b2 = tkinter.Button(window, text = &quot;bottom&quot;) b2_1 = tkinter.Button(window, text = &quot;bottom-1&quot;) b3 = tkinter.Button(window, text = &quot;left&quot;) b3_1 = tkinter.Button(window, text = &quot;left-1&quot;) b4 = tkinter.Button(window, text = &quot;right&quot;) b4_1 = tkinter.Button(window, text = &quot;right-1&quot;) b5 = tkinter.Button(window, text = &quot;center&quot;, bg = &quot;red&quot;) b1.pack(side = &quot;top&quot;) b1_1.pack(side = &quot;top&quot;, fill = &quot;x&quot;) b2.pack(side = &quot;bottom&quot;) b2_1.pack(side = &quot;bottom&quot;, anchor = &quot;e&quot;) b3.pack(side = &quot;left&quot;) b3_1.pack(side = &quot;left&quot;, fill = &quot;y&quot;) b4.pack(side = &quot;right&quot;) b4_1.pack(side = &quot;right&quot;, anchor = &quot;s&quot;) b5.pack(expand = True, fill = &quot;both&quot;) window.mainloop() . pack Parameter . - side &gt; 해당 구역으로 위젯을 이동(상하좌우) . - anchor &gt; 현재 배치된 구역 안에서 특정 위치(동서남북)로 이동 . - fill &gt; 할당된 공간에 맞게 크기가 변경 . - expand &gt; 할당되지 않은 미사용 공간을 모두 현재 위젯의 할당된 공간으로 변경 . &#50948;&#51247; &#48176;&#52824;(grid) . - grid(=셀 단위 배치)를 이용하여 위젯들을 배치 . - 위젯이름.pack(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 위젯의 배치 속성을 설정 . - 배치되는 우선 순위는 가장 처음 선언한 grid부터 배치 . - grid의 셀 단위로 배치되며 한 번에 여러 셀을 건너뛰어 배치 가능 . - grid()는 pack()과 같이 사용될 수 없으며 place()와는 같이 사용 가능 . - Tip &gt; column을 99로 위치시키더라도 그 전 grid 배치에서 최대 column의 값이 3이 었으므로 자동적으로 4로 할당 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JEA SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(False, False) b1 = tkinter.Button(window, text = &quot;(0, 0)&quot;) b2 = tkinter.Button(window, text = &quot;(0, 1)&quot;, width = 20) b3 = tkinter.Button(window, text = &quot;(0, 2)&quot;) b4 = tkinter.Button(window, text = &quot;(1, 0)&quot;) b5 = tkinter.Button(window, text = &quot;(1, 1)&quot;) b6 = tkinter.Button(window, text = &quot;(1, 3)&quot;) b7 = tkinter.Button(window, text = &quot;(2, 1)&quot;) b8 = tkinter.Button(window, text = &quot;(2, 2)&quot;) b9 = tkinter.Button(window, text = &quot;(2, 4)&quot;) b1.grid(row = 0, column = 0) b2.grid(row = 0, column = 1) b3.grid(row = 0, column = 2) b4.grid(row = 1, column = 0, rowspan = 2) b5.grid(row = 1, column = 1, columnspan = 3) b6.grid(row = 1, column = 3) b7.grid(row = 2, column = 1, sticky = &quot;w&quot;) b8.grid(row = 2, column = 2) b9.grid(row = 2 , column = 99) window.mainloop() . &#47588;&#44060;&#48320;&#49688; &#51204;&#45804; . - tkinter의 command에 매개변수를 전달 가능 . - lambda 함수를 사용해 함수에 여러 매개변수를 전달 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JEA SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(True, True) def command_args(argument1, argument2, argument3): global arg1 arg1 = argument1 * 2 print(argument1, argument2, argument3) arg1 = 1 arg2 = &quot;alpha&quot; arg3 = &quot;beta&quot; button = tkinter.Button(window, width = 25, height = 10, text = &quot;버튼&quot;, command = lambda: command_args(arg1, arg2, arg3)) button.pack(expand = True, anchor = &quot;center&quot;) window.mainloop() . Frame(&#54532;&#47112;&#51076;) . - Frame을 이용하여 다른 위젯들을 포함하기 위한 프레임을 생성 . - tkinter.Frame(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 프레임의 속성을 설정 . - 파라미터를 사용하여 프레임의 속성을 설정 . - 위젯의 파라미터 중 윈도우 창에서 프레임 이름을 이용하여 해당 프레임에 위젯을 포함 가능 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) frame1 = tkinter.Frame(window, relief = &quot;solid&quot;, bd = 2) frame1.pack(side = &quot;left&quot;, fill = &quot;both&quot;, expand = True) frame2 = tkinter.Frame(window, relief = &quot;solid&quot;, bd = 2) frame2.pack(side = &quot;right&quot;, fill = &quot;both&quot;, expand = True) button1 = tkinter.Button(frame1, text = &quot;프레임1&quot;) button1.pack(side = &quot;right&quot;) button2 = tkinter.Button(frame2, text = &quot;프레임2&quot;) button2.pack(side = &quot;left&quot;) window.mainloop() . Font(&#44544;&#44852;) . - Font를 이용하여 위젯들의 문자열에 글꼴을 설정 . - tkinter.font.Font(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 위젯에 표시할 글꼴을 설정 . - 파라미터를 사용하여 글꼴를 설정 . - 글꼴을 적용할 위젯의 font 파라미터에 사용 . import tkinter import tkinter.font window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(True, True) font = tkinter.font.Font(family = &quot;맑은고딕&quot;, size = 20, weight = &#39;bold&#39;) label = tkinter.Label(window, text = &quot;파이썬 3.6&quot;, font = font) label.pack() window.mainloop() . Bind(&#51060;&#48292;&#53944; &#49892;&#54665;) . - Bind를 이용하여 위젯들의 이벤트와 실행할 함수를 설정 . - 위젯.Bind(&quot;이벤트&quot;, 함수)를 사용하여 위젯의 이벤트가 작동할 때 실행할 함수를 설정 . - Bind를 중복해서 사용하여도 모두 적용 . - event.delta를 이용하여 마우스 휠의 delta값을 확인 . - event.delta의 값이 120일 경우 업 스크롤이며 -120일 경우 다운 스크롤 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(True, True) width = 1 def drawing(event): if width &gt; 0: x1 = event.x-1 y1 = event.y-1 x2 = event.x+1 y2 = event.y+1 canvas.create_oval(x1, y1, x2, y2, fill = &quot;blue&quot;, width = width) def scroll(event): global width if event.delta == 120: width += 1 if event.delta == -120: width -= 1 label.config(text = str(width)) canvas = tkinter.Canvas(window, relief = &quot;solid&quot;, bd = 2) canvas.pack(expand = True, fill = &quot;both&quot;) canvas.bind(&quot;&lt;B1-Motion&gt;&quot;, drawing) canvas.bind(&quot;&lt;MouseWheel&gt;&quot;, scroll) label = tkinter.Label(window, text = str(width)) label.pack() window.mainloop() .",
            "url": "https://jaesu26.github.io/calculator/python/2021/07/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC-tkinter.html",
            "relUrl": "/python/2021/07/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC-tkinter.html",
            "date": " • Jul 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://jaesu26.github.io/calculator/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaesu26.github.io/calculator/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}