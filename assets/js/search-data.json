{
  
    
        "post0": {
            "title": "eval 함수",
            "content": "eval &#54632;&#49688; &#49324;&#50857;&#48277; . - eval() 함수는 인자에 문자열을 input하면 그대로 실행하여 출력 . rtn1 = &#39;10 + 10&#39; rtn1 . &#39;10 + 10&#39; . rtn2 = eval(&#39;10 + 10&#39;) rtn2 . 20 .",
            "url": "https://gkswotn12345.github.io/calculator/python/2021/07/30/eval%ED%95%A8%EC%88%98.html",
            "relUrl": "/python/2021/07/30/eval%ED%95%A8%EC%88%98.html",
            "date": " • Jul 30, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "파이썬 tkinter",
            "content": "- 파이썬 tkinter 참고: https://076923.github.io/posts/Python-tkinter-1/ . - 위의 사이트를 참고하면서 계산기를 구현하자 . tkinter . - GUI에 대한 표준 Python 인터페이스이며 Window 창을 생성 . - import tkinter as tk . GUI가 뭐지?? | . - 그래픽 사용자 인터페이스(graphical user interface, GUI)는 사용자가 편리하게 사용할 수 있도록 입출력 등의 기능을 알기 쉬운 아이콘 따위의 그래픽으로 나타낸 것 . - GUI 참고: GUI 설명 . tkinter &#49324;&#50857; . - 윈도우이름 = tk.Tk()를 이용하여 가장 상위 레벨의 윈도우 창을 생성 . - 윈도우이름.mainloop()를 사용하여 윈도우이름의 윈도우 창을 윈도우가 종료될 때 까지 실행 . - 생성 구문과 반복 구문 사이에 위젯을 생성하고 적용 . - tk.Tk()를 적용할 경우 가장 기본적인 윈도우 창이 생성 . window &#52285; &#49444;&#51221; . - 윈도우이름.title(&quot;제목&quot;)을 이용하여 윈도우 창의 제목을 설정 . - 윈도우이름.geometry(&quot;너비x높이+x좌표+y좌표&quot;)를 이용하여 윈도우 창의 너비와 높이, 초기 화면 위치의 x좌표와 y좌표를 설정 . - (0,0)은 컴퓨터의 좌상단 . - 윈도우이름.resizeable(상하, 좌우)을 이용하여 윈도우 창의 창 크기 조절 가능 여부를 설정 --&gt; True로 설정할 경우 윈도우 창의 크기를 조절 가능(True = 1, False = 0) . Widget &#48176;&#52824; . - 위젯이름 = tkinter.Label(윈도우창, text=&quot;내용&quot;)을 사용하여 윈도우 창에 Label 위젯을 설정 --&gt; 기본 속성: 가장 최상단에 라벨이 배치 . - 위젯이름.pack()을 사용하여 위젯을 배치 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) label = tkinter.Label(window, text = &quot;안녕하세요.&quot;) label.pack() window.mainloop() . - 기본 윈도우 창 생성 -&gt; window . - window의 제목, 크기, 창 크기 조절 . - 라벨도 추가했음 --&gt; &quot;안녕하세요&quot;라는 문자열을 window 상단 중앙부분(기본값)에 위치시킴 . Label(&#46972;&#48296;) . - Label을 이용하여 삽입한 이미지나 도표, 그림 등에 사용되는 주석문을 생성 . Label &#49324;&#50857; . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) label = tkinter.Label(window, text = &quot;파이썬&quot;, width = 10, height = 5, fg = &quot;red&quot;, relief = &quot;solid&quot;) label.pack() window.mainloop() . - tkinter.Label(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 라벨의 속성을 설정 . - window에 라벨 추가 --&gt; &quot;파이썬&quot; 문자열을 넣고 가로는 10, 세로는5, 문자열 색은 &quot;red&quot;, 라벨의 테두리 모양은 &quot;solid&quot; . Button(&#48260;&#53948;) . - Button을 이용하여 메소드 또는 함수 등을 실행시키기 위한 단추를 생성 . Button &#49324;&#50857; . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) count=0 def countUP(): global count count += 1 label.config(text = str(count)) label = tkinter.Label(window, text = &quot;0&quot;) label.pack() button = tkinter.Button(window, overrelief = &quot;solid&quot;, width = 15, command = countUP, repeatdelay = 1000, repeatinterval = 100) button.pack() window.mainloop() . - tkinter.Button(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 버튼의 속성을 설정 . - 파라미터 중 command를 이용하여 사용자 정의 함수 : countUP을 실행 . - label.config()를 통해 label의 text라는 속성을 변화시킴 . Entry(&#44592;&#51077;&#52285;) . - Entry을 이용하여 텍스트를 입력받거나 출력하기 위한 기입창을 생성 . Entry &#49324;&#50857; . import tkinter from math import * window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) def calc(event): label.config(text = &quot;결과=&quot; + str(eval(entry.get()))) entry = tkinter.Entry(window) entry.bind(&quot;&lt;Return&gt;&quot;, calc) entry.pack() label = tkinter.Label(window) label.pack() window.mainloop() . - tkinter.Entry(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 기입창의 속성을 설정 . - Entry.bind()를 이용하여 key나 mouse 등의 event를 처리하여 메소드나 함수를 실행 . - 기입창에 간단한 수학함수 등을 작성 후 Enter 키를 입력시 라벨에 결과가 표시 . - ex) 2 + 2 입력시 결과 = 4가 반환 . &#50948;&#51247; &#48176;&#52824;(pack) . - pack(=상대 위치 배치)을 이용하여 위젯들을 배치 . - 위젯이름.pack(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 위젯의 배치 속성을 설정 . - 배치되는 우선 순위는 가장 처음 선언한 pack부터 배치 . - pack의 파라미터로 인하여 위젯의 크기가 변경될 수 있음 . - pack()은 grid()와 같이 사용될 수 없으며 place()와는 같이 사용 가능 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(False, False) b1 = tkinter.Button(window, text = &quot;top&quot;) b1_1 = tkinter.Button(window, text = &quot;top-1&quot;) b2 = tkinter.Button(window, text = &quot;bottom&quot;) b2_1 = tkinter.Button(window, text = &quot;bottom-1&quot;) b3 = tkinter.Button(window, text = &quot;left&quot;) b3_1 = tkinter.Button(window, text = &quot;left-1&quot;) b4 = tkinter.Button(window, text = &quot;right&quot;) b4_1 = tkinter.Button(window, text = &quot;right-1&quot;) b5 = tkinter.Button(window, text = &quot;center&quot;, bg = &quot;red&quot;) b1.pack(side = &quot;top&quot;) b1_1.pack(side = &quot;top&quot;, fill = &quot;x&quot;) b2.pack(side = &quot;bottom&quot;) b2_1.pack(side = &quot;bottom&quot;, anchor = &quot;e&quot;) b3.pack(side = &quot;left&quot;) b3_1.pack(side = &quot;left&quot;, fill = &quot;y&quot;) b4.pack(side = &quot;right&quot;) b4_1.pack(side = &quot;right&quot;, anchor = &quot;s&quot;) b5.pack(expand = True, fill = &quot;both&quot;) window.mainloop() . pack Parameter . - side &gt; 해당 구역으로 위젯을 이동(상하좌우) . - anchor &gt; 현재 배치된 구역 안에서 특정 위치(동서남북)로 이동 . - fill &gt; 할당된 공간에 맞게 크기가 변경 . - expand &gt; 할당되지 않은 미사용 공간을 모두 현재 위젯의 할당된 공간으로 변경 . &#50948;&#51247; &#48176;&#52824;(grid) . - grid(=셀 단위 배치)를 이용하여 위젯들을 배치 . - 위젯이름.pack(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 위젯의 배치 속성을 설정 . - 배치되는 우선 순위는 가장 처음 선언한 grid부터 배치 . - grid의 셀 단위로 배치되며 한 번에 여러 셀을 건너뛰어 배치 가능 . - grid()는 pack()과 같이 사용될 수 없으며 place()와는 같이 사용 가능 . - Tip &gt; column을 99로 위치시키더라도 그 전 grid 배치에서 최대 column의 값이 3이 었으므로 자동적으로 4로 할당 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JEA SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(False, False) b1 = tkinter.Button(window, text = &quot;(0, 0)&quot;) b2 = tkinter.Button(window, text = &quot;(0, 1)&quot;, width = 20) b3 = tkinter.Button(window, text = &quot;(0, 2)&quot;) b4 = tkinter.Button(window, text = &quot;(1, 0)&quot;) b5 = tkinter.Button(window, text = &quot;(1, 1)&quot;) b6 = tkinter.Button(window, text = &quot;(1, 3)&quot;) b7 = tkinter.Button(window, text = &quot;(2, 1)&quot;) b8 = tkinter.Button(window, text = &quot;(2, 2)&quot;) b9 = tkinter.Button(window, text = &quot;(2, 4)&quot;) b1.grid(row = 0, column = 0) b2.grid(row = 0, column = 1) b3.grid(row = 0, column = 2) b4.grid(row = 1, column = 0, rowspan = 2) b5.grid(row = 1, column = 1, columnspan = 3) b6.grid(row = 1, column = 3) b7.grid(row = 2, column = 1, sticky = &quot;w&quot;) b8.grid(row = 2, column = 2) b9.grid(row = 2 , column = 99) window.mainloop() . &#47588;&#44060;&#48320;&#49688; &#51204;&#45804; . - tkinter의 command에 매개변수를 전달 가능 . - lambda 함수를 사용해 함수에 여러 매개변수를 전달 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JEA SU&quot;) window.geometry(&quot;350x500+800+200&quot;) window.resizable(True, True) def command_args(argument1, argument2, argument3): global arg1 arg1 = argument1 * 2 print(argument1, argument2, argument3) arg1 = 1 arg2 = &quot;alpha&quot; arg3 = &quot;beta&quot; button = tkinter.Button(window, width = 25, height = 10, text = &quot;버튼&quot;, command = lambda: command_args(arg1, arg2, arg3)) button.pack(expand = True, anchor = &quot;center&quot;) window.mainloop() . Frame(&#54532;&#47112;&#51076;) . - Frame을 이용하여 다른 위젯들을 포함하기 위한 프레임을 생성 . - tkinter.Frame(윈도우 창, 파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 해당 윈도우 창에 표시할 프레임의 속성을 설정 . - 파라미터를 사용하여 프레임의 속성을 설정 . - 위젯의 파라미터 중 윈도우 창에서 프레임 이름을 이용하여 해당 프레임에 위젯을 포함 가능 . import tkinter window = tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(False, False) frame1 = tkinter.Frame(window, relief = &quot;solid&quot;, bd = 2) frame1.pack(side = &quot;left&quot;, fill = &quot;both&quot;, expand = True) frame2 = tkinter.Frame(window, relief = &quot;solid&quot;, bd = 2) frame2.pack(side = &quot;right&quot;, fill = &quot;both&quot;, expand = True) button1 = tkinter.Button(frame1, text = &quot;프레임1&quot;) button1.pack(side = &quot;right&quot;) button2 = tkinter.Button(frame2, text = &quot;프레임2&quot;) button2.pack(side = &quot;left&quot;) window.mainloop() . Font(&#44544;&#44852;) . - Font를 이용하여 위젯들의 문자열에 글꼴을 설정 . - tkinter.font.Font(파라미터1, 파라미터2, 파라미터3, ...)을 사용하여 위젯에 표시할 글꼴을 설정 . - 파라미터를 사용하여 글꼴를 설정 . - 글꼴을 적용할 위젯의 font 파라미터에 사용 . import tkinter import tkinter.font window=tkinter.Tk() window.title(&quot;HAN JAE SU&quot;) window.geometry(&#39;350x500+800+200&#39;) window.resizable(True, True) font = tkinter.font.Font(family = &quot;맑은고딕&quot;, size = 20, weight = &#39;bold&#39;) label = tkinter.Label(window, text = &quot;파이썬 3.6&quot;, font = font) label.pack() window.mainloop() . Bind(&#51060;&#48292;&#53944; &#49892;&#54665;) .",
            "url": "https://gkswotn12345.github.io/calculator/python/2021/07/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC-tkinter.html",
            "relUrl": "/python/2021/07/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC-tkinter.html",
            "date": " • Jul 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "수상 . - 1학년 2학기 때 장학금 10만원… . 학점 . - 1학년 1학기: 4.38 . - 1학년 2학기: 4.50 . - 2학년 1학기: 4.00(희망), 4.42(현실)? . 프로그래밍 언어 . - R . - 파이썬 . - 잘하고 싶다… . 자격증 . - 있을까? . 토익 . - 할거임 . 대외활동 . - 해야지 . 봉사활동 . - .. .",
          "url": "https://gkswotn12345.github.io/calculator/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gkswotn12345.github.io/calculator/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}